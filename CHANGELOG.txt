
#############################ver 2.2.4:[2014-03-17]#############################
修复了:
1.在$this->view()之前输出的内容会被清空的bug。
优化了：
1.分页条标签，便于css控制
增加了：
1.$this->page($total, $page, $pagesize, $url, $order = array(1, 2, 3, 4, 5, 6),$a_count=10)
增加了$a_count参数，用于控制分页条中a页码链接的总数量,不包含当前页的a标签，默认10个。当$order为null时$order使用默认array(1, 2, 3, 4, 5, 6)；
示例：
$loader=WoniuLoader::instance();
echo $loader->page(100,$loader->input->get('p',1),2,'?p={page}',null,2);

#############################ver 2.2.3:[2014-01-01]#############################
增加了：
1.模型、类库、helper文件夹配置支持数组，一个项目可以同时拥有多个模型、类库、helper文件夹了。
这样“子项目”就能够“继承父项目的模型、类库、helper文件夹”同时拥有自己的模型、类库、helper文件夹。
2.WoniuLoader::instance(true)，WoniuModel::instance(true)，增加了true判断，
  如果是ture就使用当前配置重新初始化一个对象，以前是只初始化一次其后一直使用第一次的对象实例。
3.增加了truepath函数取代系统函数realpath，当路径不存在的时候truepath也可以返回正确的绝对路径字符串。
4.增加了函数getInstance()获取当前控制器实例。
修复了:
1.MyLoader自定义类名称无效的问题。
2.realpath在windows上带来的一些问题。
3.$this->setCookie在ip或者非域名访问时设置的cookie无效的问题。
4.$this->model($model_name, $alias_name = null),当$alias_name有大写字母时，无法通过$this->model->$alias_name访问模型的问题。


#############################ver 2.2.2:[2013-12-15]#############################
增加了：
1.下列方法增加了xss过滤参数$xss_clean，当$xss_clean为true时，会对数据进行xss过滤。
$this->input->get_post($key=null,$default=null,$xss_clean=false);
$this->input->get($key=null,$default=null,$xss_clean=false);
$this->input->post($key=null,$default=null,$xss_clean=false);
$this->input->cookie($key=null,$default=null,$xss_clean=false);
2.增加了$system['my_loader']自定义Loader,方便用户在底层拓展框架核心。
详细说明如下：
/**
 * 自定义Loader，用于拓展框架核心功能,
 * Loader是控制器和模型都继承的一个类，大部分核心功能都在loader中完成。
 * 这里是自定义Loader类文件的完整路径
 * 自定义Loader文件名称和类名称必须是：
 * 文件名称：类名.class.php
 * 比如：MyLoader.class.php，文件里面的类名就是:MyLoader
 * 注意：
 * 1.自定义Loader必须继承WoniuLoader。
 * 2.一个最简单的Loader示意：(假设文件名称是：MyLoader.class.php)
 * class MyLoader extends WoniuLoader {
 *      public function __construct() {
 *          parent::__construct();
 *      }
 *  } 
 * 3.如果无需自定义Loader，留空即可。
 */
$system['my_loader']=$system['library_folder'].'/MyLoader.class.php';
3.灵活的表单验证,让表单验证不是像其它框架那样成为宣传的噱头实际上用起来十分不方便形如鸡肋，而是切实好用的、简化编码的。
优化了：
1.数据库驱动的custom_result_object方法，增加了set_XXX的支持，
使得$this->db->get('table')->result($Bean_Class_Name= 'object');
$this->db->get('table')->row($n = 0, $Bean_Class_Name = 'object');
支持Bean类$Bean_Class_Name中的set_XXX()属性。$Bean_Class_Name Bean类要提供字段的setter和getter，
格式是：set_字段名称($val)，get_字段名称(),字段名称区分大小写。
一个标准的Bean类实例：
假设这个Bean类对应表user，user表有一个字段id。
class UserBean{
     private $id;
     public function get_id(){
        reutrn $this->id;
     }
     public function set_id($val){
        reutrn $this->id=$val;
     }
}

修复了:
1.library文件夹不存在的时候报错的问题。
2.sqlite3驱动报Strict错Creating default object from empty value
  line:832：$back = new stdClass();
升级提示：
1.在$system里面增加配置：$system['my_loader']='';即可。

#############################ver 2.2.1:[2013-11-25]#############################
增加了：
1.自动创建项目文件夹功能（$system['folder_auto_init'] = TRUE;），可以手动开启或关闭。
2.是否自动建立项目文件夹。当开始一个新项目的时候，以前要一个个手动建立文件夹，
  现在可以在配置里面设置$system['folder_auto_init']=TRUE;设置为TRUE 即可，系统就会自动建立文件夹。
  在建立完文件夹后建议设置为FALSE，这样系统就不用每次都检测文件夹是否存在提高性能。
3.灵活的错误控制。
4.$this->database($config = NULL, $is_return = false, $force_new_conn = false)
  默认情况下一个配置只有一个数据库驱动对象实例，第二次不再重新连接，使用已经存在的实例。
  增加了$force_new_conn参数，该参数为true时每次都使用指定的数据库配置重新连接数据库，使用生成新的数据库实例。
修复了:
1.插件模式下自动加载helper会导致重复加载报错的问题。
2.pathinfo模式路由中有?,路由失效的问题。
  比如：index.php/route.index/xxx/ddd/?flag=microphp
  doIndex($p1=null,$p2=null){
      $flag=$this->input->get('flag');
  }
  可以通过?flag=microphp的形式传递get变量。
  自定义路由模式时注意，这时候“路由字符串”是route.index/xxx/ddd/&flag=microphp，即?会被&替换。
3.插件模式下WoniuLoader::instance()，自动加载无效的问题。
4.如果使用WoniuRouter::setConfig()使配置发生变化，WoniuLoader::instance(),WoniuModel::instance(),WoniuController::instance()
  不会触发变化后配置中的自动加载的问题。
修改了：
1.$this->ajax_echo($code, $tip = '', $data = '',$is_exit = true)
  修改为：
  $this->ajax_echo($code, $tip = '', $data = '', $jsonp_callback=null,$is_exit = true)
  以支持jsonp输出。
优化了:
1.WouniuInput->is_ajax(),修改为static;
升级提示：
1.在$system中增加如下配置：
/**
 * 是否自动建立项目文件夹
 * 当开始一个新项目的时候，可以在配置里面设置为TRUE ，系统就会自动建立文件夹。
 * 在建立完文件夹后建议设置为FALSE，这样系统就不用每次都检测文件夹是否存在,提高性能。
 */
$system['folder_auto_init']=FALSE;
/**
 * 是否接管误信息
 * true：所有错误信息将由系统格式化输出
 * false：所有错误信息将原样输出
 */
$system['error_manage'] = FALSE;

/**
 * 是否开启错误日志记录
 * true：开启，如果开启了，系统将接管错误信息输出，忽略system['error_manage']，
 *       同时务必设置自己的错误日志记录处理方法
 * false：关闭
 */
$system['log_error'] = FALSE;
/* * --------------------------------错误日志记录处理配置-----------------------
 * 错误日志记录处理方法，可以是一个“函数名称”或是“类的静态方法”用数组方式array('class_name'=>'method_name')。
 * 提示：
 * 1.如果是类，把类按着类库的命名方式命名，然后放到类库目录即可;
 * 2.如果是函数，把函数放到一个helper文件里面，然后在$system['helper_file_autoload']自动加载的helper文件里面填写上这个helper文件即可。
 * 3.留空则不处理。
 * 4.系统会传递给error、exception处理方法5个参数：（$errno, $errstr, $errfile, $errline,$strace）
 * 参数说明：
 * $errno：错误级别，就是PHP里面的E_NOTICE之类的静态变量，错误级别和具体含义对应关系如下，键是代码，值是代码含义。
 *         array('0'=>'EXCEPTION',//异常信息
 *               '1' => 'ERROR',//致命的运行时错误。这类错误一般是不可恢复的情况，例如内存分配导致的问题。后果是导致脚本终止不再继续运行。
 *               '2' => 'WARNING', //运行时警告 (非致命错误)。仅给出提示信息，但是脚本不会终止运行。
 *               '4' => 'PARSE', //编译时语法解析错误。解析错误仅仅由分析器产生。
 *               '8' => 'NOTICE', //运行时通知。表示脚本遇到可能会表现为错误的情况，但是在可以正常运行的脚本里面也可能会有类似的通知。
 *               '16' => 'CORE_ERROR', //在PHP初始化启动过程中发生的致命错误。该错误类似 E_ERROR，但是是由PHP引擎核心产生的。
 *               '32' => 'CORE_WARNING',//PHP初始化启动过程中发生的警告 (非致命错误) 。类似 E_WARNING，但是是由PHP引擎核心产生的。
 *               '64' => 'COMPILE_ERROR', //致命编译时错误。类似E_ERROR, 但是是由Zend脚本引擎产生的。
 *               '128' => 'COMPILE_WARNING', //编译时警告 (非致命错误)。类似 E_WARNING，但是是由Zend脚本引擎产生的。
 *               '256' => 'USER_ERROR', //用户产生的错误信息。类似 E_ERROR, 但是是由用户自己在代码中使用PHP函数 trigger_error()来产生的。
 *               '512' => 'USER_WARNING', //用户产生的警告信息。类似 E_WARNING, 但是是由用户自己在代码中使用PHP函数 trigger_error()来产生的。
 *               '1024' => 'USER_NOTICE',//用户产生的通知信息。类似 E_NOTICE, 但是是由用户自己在代码中使用PHP函数 trigger_error()来产生的。
 *               '2048' => 'STRICT', //启用 PHP 对代码的修改建议，以确保代码具有最佳的互操作性和向前兼容性。
 *               '4096' => 'RECOVERABLE_ERROR'//可被捕捉的致命错误。 它表示发生了一个可能非常危险的错误，但是还没有导致PHP引擎处于不稳定的状态。 如果该错误没有被用户自定义句柄捕获 (参见 set_error_handler())，将成为一个 E_ERROR　从而脚本会终止运行。
 *               '8192' => 'DEPRECATED', //（php5.3）运行时通知。启用后将会对在未来版本中可能无法正常工作的代码给出警告。
 *               '16384' => 'USER_DEPRECATED', //（php5.3）用户产少的警告信息。 类似 E_DEPRECATED, 但是是由用户自己在代码中使用PHP函数 trigger_error()来产生的。
 *         );
 *         可以通过判断错误级别，然后有针对性的处理。一般我们需要处理的就是致命错误（0，1，4）和一般错误（2，8，2048，8192）.
 * $errstr：具体的错误信息
 * $errfile：出错的文件完整路径
 * $errline：出错的行号
 * $strace： 调用堆栈信息
 * 系统会传递给db_error处理方法2个参数：（$errmsg,$strace）
 * 参数说明：
 * $errmsg：具体的数据库错误信息
 * $strace：调用堆栈信息
 * 一个错误处理类参考：
 ＊ http://git.oschina.net/snail/microphp/blob/development/tests/app/library/ErrorHandle.class.php
 */
$system['log_error_handle'] = array(
    'error' => '', //array('ErrorHandle' => 'error_handle'),
    'exception' => '', //array('ErrorHandle' => 'exception_handle'),
    'db_error' => '', //array('ErrorHandle' => 'db_error_handle')
);


#############################ver 2.2.0#############################
增加了：
    1.$this->cache为最新的phpfastcache2.1,缓存功能更加强大,而且编写自己的缓存类非常容易。
    2.自定义缓存类说明：
        $system['cache_drivers'] = array();
        自定义缓存类文件的路径是$system['cache_drivers']的一个元素，可以有多个自定义缓存类。
        缓存类文件名称命名规范是：
           比如文件名是mycahe.php,那么文件mycahe.php里面的缓存类就是：class phpfastcache_mycahe{......}
           mycahe.php的编写规范请参考：https://github.com/khoaofgod/phpfastcache/tree/Stable-Version-1.x/phpfastcache_v2.1_release/phpfastcache/drivers
    3.phpfastcache增加Redis缓存支持
    4.Redis存储SESSION支持。
    5.Memcache存储SESSION支持。
    6.Mongodb存储SESSION支持。
    7.Mysql存储SESSION支持。
    8.有时候类库文件很多，都放在一个类库文件夹里面会显得很乱，不好管理。
      因此增加了自动加载的类库子文件夹支持：类库文件放在配置的类库文件夹的一级子文件夹里面。
删除了：
    1.WoniuCache已经被移除，请使用$this->cache代替
优化了：
    1.缓存文件夹的创建。
升级提示：
1.如果项目中使用了WoniuCache进行缓存，请使用$this->cache->代替WoniuCache::
2.在$system中增加如下配置：
/**
 * ========================缓存配置========================
 */
$system['cache_drivers'] = array();
$system['cache_config'] = array(
    /*
     * 默认存储方式
     * 可用的方式有：auto,apc,sqlite,files,memcached,redis,wincache,xcache,memcache
     * auto自动模式寻找的顺序是 : apc,sqlite,files,memcached,redis,wincache,xcache,memcache
     */
    "storage" => "auto",
    /*
     * 默认缓存文件存储的路径
     * 使用绝对全路径，比如： /home/username/cache
     * 留空，系统自己选择
     */
    "path" => "", // 缓存文件存储默认路径
    "securityKey" => "", // 缓存安全key，建议留空，系统会自动处理 PATH/securityKey

    /*
     * 第二驱动
     * 比如：当你现在在代码中使用的是memcached, apc等等，然后你的代码转移到了一个新的服务器而且不支持memcached 或 apc
     * 这时候怎么办呢？设置第二驱动即可，当你设置的驱动不支持的时候，系统就使用第二驱动。
     * $key是你设置的驱动，当设置的“storage”=$key不可用时，就使用$key对应的$value驱动
     */
    "fallback" => array(
        "memcache" => "files",
        "memcached" => "files",
        "redis" => "files",
        "wincache" => "files",
        "xcache" => "files",
        "apc" => "files",
        "sqlite" => "files",
    ),
    /*
     * .htaccess 保护
     * true会自动在缓存文件夹里面建立.htaccess文件防止web非法访问
     */
    "htaccess" => false,
    /*
     * Memcache服务器地址;
     */
    "server" => array(
        array("192.168.199.25", 11211, 1),
    //  array("new.host.ip",11211,1),
    ),
    /*
     * Redis服务器地址;
     */
    "redis" => array(
        'type'=>'tcp',//sock,tcp;连接类型，tcp：使用host port连接，sock：本地sock文件连接
        'prefix'=>@$_SERVER['HTTP_HOST'],//key的前缀，便于管理查看，在set和get的时候会自动加上和去除前缀，无前缀请保持null
        'sock'=>'',//sock的完整路径
        'host' => '192.168.199.25',
        'port' => 6379,
        'password' => NULL,//密码，如果没有,保持null
        'timeout'=>0,//0意味着没有超时限制，单位秒
        'retry'=>100,//连接失败后的重试时间间隔，单位毫秒
        'db' => 0, // 数据库序号，默认0, 参考 http://redis.io/commands/select
    ),
);
/**
 * =======================SESSION管理配置=======================
 */
$system['session_handle'] = array(
    'handle' => '', //支持的管理类型：mongodb,mysql,memcache,redis。不使用留空即可。
    'common' => array(
        'autostart' => true,//是否自动session_start()
        'cookie_path' => '/',
        'cookie_domain' => '.' . @$_SERVER['HTTP_HOST'],
        'session_name' => 'PHPSESSID',
        'lifetime' => 3600, // session lifetime in seconds
    ),
    'mongodb' => array(
        'host' => '192.168.199.25',
        'port' => 27017,
        'user' => 'root',
        'password' => 'local',
        'database' => 'local', // name of MongoDB database
        'collection' => 'session', // name of MongoDB collection
        // persistent related vars
        'persistent' => false, // persistent connection to DB?
        'persistentId' => 'MongoSession', // name of persistent connection
        // whether we're supporting replicaSet
        'replicaSet' => false,
    ),
    /**
     * mysql表结构
     *   CREATE TABLE `session_handler_table` (
      `id` varchar(255) NOT NULL,
      `data` mediumtext NOT NULL,
      `timestamp` int(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE KEY `id` (`id`,`timestamp`),
      KEY `timestamp` (`timestamp`)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
     */
    'mysql' => array(
        'host' => '127.0.0.1',
        'port' => 3306,
        'user' => 'root',
        'password' => 'admin',
        'database' => 'test',
        'table' => 'session_handler_table',
    ),
    /**
     * memcache采用的是session.save_handler管理机制
     * 需要php安装memcache拓展支持
     */
    'memcache' => "tcp://192.168.199.25:11211",
    /**
     * redis采用的是session.save_handler管理机制
     * 需要php安装redis拓展支持,你可以在https://github.com/nicolasff/phpredis 找到该拓展。
     */
    'redis' => "tcp://192.168.199.25:6379",
);

#############################ver 2.1.12#############################
增加了：
1.自定义路由模式。
    比如：
    (1).http://localhost/index.php?welcome.index
    (2).http://localhost/index.php/welcome.index
    路由字符串是welcome.index(不包含最前面的?或者/)，路由规则都是针对“路由字符串”的。
    现在定义路由规则：
    $system['route']=array(
        "/^welcome\\/?(.*)$/u"=>'welcome.ajax/$1'
    );
    路由规则说明：
    1.路由规则是一个关联数组
    2.数组的key是匹配“路由字符串”的正则表达式，其实就是preg_match的第一个参数。
    3.数组的value是替换后的路由字符串
    4.系统使用的url路由就是最后替换后的路由字符串
优化了：
1.$this->db->xxx_where_in($key,$array),自动检测$array是否是空数组，
  当$array为空数组时,就认为$array=array('')即$key为''空值,不再报错。
升级提示:
1.如果想使用路由功能请在index.php的$system里面增加$system['route']=array();即可。


#############################ver 2.1.11#############################
修复了:
1.$this->config($group,$key),当$key是0时无效的问题。
增加了:
1.增加了$this->setConfig($key,$val)方法，设置配置,$key是helper文件里面的全局变量名称
优化了：
1.修改$this->helper()和$this->config()把配置变量放到$this->config避免与全局变量冲突
2.在支持代码提示的IDE中，例如Netbeans，增加了$this->db->...的数据库方法提示
升级提示:无

#############################ver 2.1.10#############################
修复了:
1.在PHP5.4及以上版本中的notice问题 Strict Standards: Declaration of xxx。
增加了:
1.命令行支持
2.mysqli驱动支持
升级提示:无

#############################ver 2.1.9beta2#############################

修复了:
1.$this->view()不传递数据时，$this->view_vars无效的问题。
增加了:无
升级提示:无

#############################ver 2.1.9beta#############################
修复了:
1.router的注入时机，使得在父类的构造方法之后即可使用路由信息。
增加了:
1.控制器中$this->view_vars['vars']='xxx';可以向$this->view_vars添加附加的视图数据，该数据会在显示视图的时候附加到视图数据里面。
升级提示:无

#############################ver 2.1.8#############################
修复了:找不到library class的提示信息。
增加了:$this->router;包含了所有的路由信息。
升级提示:无
